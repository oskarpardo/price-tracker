name: Price Tracker

on:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *" # 09:00 Chile (UTC-3) ≈ 12:00 UTC

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create script
        shell: bash
        run: |
          cat > tracker.py << 'PY'
          import os, math, requests, sys

          # ====== CONFIG (lee del env del paso "Run tracker") ======
          API_KEY      = os.getenv("ITAD_API_KEY","").strip()
          PUSH_USER    = os.getenv("PUSHOVER_USER","").strip()
          PUSH_TOKEN   = os.getenv("PUSHOVER_TOKEN","").strip()

          # Precios / márgenes
          MARGIN       = float(os.getenv("MARGIN","0.25"))     # % de utilidad deseada (opcional)
          FX           = float(os.getenv("FX_TO_CLP","950"))    # sólo se usa si el precio NO viene en CLP
          COUNTRY      = os.getenv("COUNTRY","CL").upper()      # Forzamos CL por defecto

          # Mercado Libre CL (pedido del usuario)
          ML_COMMISSION = float(os.getenv("ML_COMMISSION","0.19"))  # 19% comisión
          ML_FEE_700_LT = int(os.getenv("ML_FEE_700_THRESHOLD","9990"))  # umbral 9.990
          ML_FEE_700    = int(os.getenv("ML_FEE_700","700"))          # $700 si costo < umbral

          # ====== Juegos: usa games.txt (si existe) o env GAMES ======
          GAMES_ENV    = os.getenv("GAMES","").strip()
          games = []
          try:
              with open("games.txt","r",encoding="utf-8") as f:
                  games = [l.strip() for l in f if l.strip()]
          except FileNotFoundError:
              if GAMES_ENV:
                  for part in GAMES_ENV.replace(",", "\n").splitlines():
                      if part.strip(): games.append(part.strip())
          if not games:
              print("No hay juegos. Agrega games.txt o env GAMES.")
              sys.exit(0)

          if not API_KEY:
              print("ERROR: Falta ITAD_API_KEY (configura secret/env).")
              sys.exit(1)

          sess = requests.Session()
          sess.headers.update({"User-Agent":"price-tracker/1.5"})
          BASE = "https://api.isthereanydeal.com"

          def _add_key(params:dict)->dict:
              params = dict(params)
              params["key"] = API_KEY
              return params

          # ---- v1: búsqueda por nombre -> obtiene 'id'
          def search_game_id(title:str):
              url = f"{BASE}/games/search/v1"
              params = _add_key({"title": title, "results": 1})
              r = sess.get(url, params=params, timeout=20)
              if r.status_code == 403:
                  print("[ERROR] ITAD 403: Invalid or expired api key. Revisa ITAD_API_KEY.")
                  sys.exit(1)
              if not r.ok:
                  print(f"[WARN] search {title}: {r.status_code} {r.text[:200]}")
                  return None
              data = r.json() or []
              if not data:
                  return None
              return data[0].get("id"), data[0].get("title")

          # ---- v2: overview por IDs (POST) -> mejor precio actual y regular; link ITAD
          # Devuelve (price_clp, regular_clp, itad_url)
          def overview_clp(game_id:str):
              url = f"{BASE}/games/overview/v2"
              params = _add_key({"country": COUNTRY})
              r = sess.post(url, params=params, json=[game_id], timeout=20)
              if r.status_code == 403:
                  print("[ERROR] ITAD 403: Invalid or expired api key. Revisa ITAD_API_KEY.")
                  sys.exit(1)
              if not r.ok:
                  print(f"[WARN] overview {game_id}: {r.status_code} {r.text[:200]}")
                  return None
              js = r.json() or {}
              prices = js.get("prices") or []
              if not prices:
                  return None
              item = prices[0]
              cur  = (item.get("current") or {})
              price = (cur.get("price") or {}).get("amount", 0.0)
              curr  = (cur.get("price") or {}).get("currency","USD")
              regular = (cur.get("regular") or {}).get("amount", price)  # “precio anterior”
              itad_url = (item.get("urls") or {}).get("game","")

              # Filtrar SOLO ofertas en CLP (activables/dirigidas a Chile)
              if curr != "CLP":
                  # Si el usuario lo permite, podríamos convertir; pero pidió CLP y activables en CL → omitimos
                  return None

              price_clp   = float(price)
              regular_clp = float(regular)
              return price_clp, regular_clp, itad_url

          # ===== ML recomendado =====
          # Queremos un precio de venta 'p' tal que:
          # ingreso_neto = p*(1-ML_COMMISSION) - fee >= costo*(1+MARGIN)
          # fee = 700 si costo < 9990, sino 0
          def ml_recommended(costo_clp: float) -> int:
              fee = ML_FEE_700 if costo_clp < ML_FEE_700_LT else 0
              objetivo = costo_clp * (1.0 + MARGIN)
              denom = (1.0 - ML_COMMISSION)
              if denom <= 0: denom = 0.01
              p = (objetivo + fee) / denom
              # redondeo psicológico: al múltiplo de 10 más cercano y terminar en 90 cuando aplica
              p = int(round(p / 10.0) * 10)
              if p % 100 != 90:
                  p = (p // 100) * 100 + 90
              return max(p, int(costo_clp)+500)  # nunca menor al costo + 500

          def push(title:str, message:str):
              if not (PUSH_USER and PUSH_TOKEN):
                  print("[INFO] Pushover no configurado, omito push.")
                  return
              r = requests.post("https://api.pushover.net/1/messages.json", data={
                  "token": PUSH_TOKEN,
                  "user": PUSH_USER,
                  "title": title,
                  "message": message
              }, timeout=20)
              print(f"[Pushover] status={r.status_code} {r.text[:120]}")

          # ====== Ejecuta ======
          any_found = False
          for title in games:
              found = search_game_id(title)
              if not found:
                  print(f"❓ {title}: no encontrado (search v1)")
                  continue
              game_id, canonical = found
              res = overview_clp(game_id)
              if not res:
                  print(f"⚠️ {title}: sin oferta en CLP/Chile (overview v2 con country={COUNTRY})")
                  continue
              any_found = True
              price_clp, regular_clp, itad_url = res

              recomendado = ml_recommended(price_clp)
              shown = canonical or title

              # Salida pedida: solo CLP, “anterior: nuevo” y recomendado ML + link ITAD
              # Ejemplo:
              # Elden Ring
              # Anterior: $44.990 → Nuevo: $31.990
              # ML recomendado: $39.990
              # https://isthereanydeal.com/game/...
              def fmt(n): 
                  return f"${int(round(n)):,}".replace(",", ".")

              msg = (
                  f"{shown}\n"
                  f"Anterior: {fmt(regular_clp)} \u2192 Nuevo: {fmt(price_clp)}\n"
                  f"ML recomendado: {fmt(recomendado)}\n"
                  f"{itad_url}"
              )
              print(msg)
              push(f"Precio {title}", msg)

          if not any_found:
              print("[INFO] No se obtuvieron precios en CLP para Chile. Revisa títulos exactos o cambia COUNTRY a 'CL' (ya está) / tiendas con disponibilidad regional.")
          PY

      - name: Run tracker
        env:
          # 👇 Reemplaza estas 3 líneas con tus claves 👇
          ITAD_API_KEY: "f985653422153034fef786c70b7e1a15b111a7bb"
          PUSHOVER_USER: "uuxn5yknp86f48ykd92bgg2uiyg7nw"
          PUSHOVER_TOKEN: "aam5u7zmaj7uoqr24jycdv84wyk6r6"

          # Config rápida (ajústala cuando quieras)
          ML_COMMISSION: "0.13"
          TAX_RATE: "0.19"
          MARGIN: "0.25"
          FX_TO_CLP: "950"
          COUNTRY: "CL"

          # Juegos por nombre (si no subes games.txt)
          GAMES: |
            Elden Ring
            Hollow Knight
        run: python tracker.py
