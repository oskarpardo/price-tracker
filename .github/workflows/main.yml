name: Price Tracker

on:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *" # 09:00 Chile (UTC-3) ~ 12:00 UTC

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create script
        shell: bash
        run: |
          cat > tracker.py << 'PY'
          import os, math, requests, sys

          # ====== CONFIG (lee del env del paso "Run tracker") ======
          API_KEY      = os.getenv("ITAD_API_KEY","").strip()
          PUSH_USER    = os.getenv("PUSHOVER_USER","").strip()
          PUSH_TOKEN   = os.getenv("PUSHOVER_TOKEN","").strip()
          COMMISSION   = float(os.getenv("ML_COMMISSION","0.13"))
          TAX_RATE     = float(os.getenv("TAX_RATE","0.19"))
          MARGIN       = float(os.getenv("MARGIN","0.25"))
          FX           = float(os.getenv("FX_TO_CLP","950"))
          COUNTRY      = os.getenv("COUNTRY","US").upper()
          GAMES_ENV    = os.getenv("GAMES","").strip()

          # ====== Juegos: usa games.txt (si existe) o env GAMES ======
          games = []
          try:
              with open("games.txt","r",encoding="utf-8") as f:
                  games = [l.strip() for l in f if l.strip()]
          except FileNotFoundError:
              if GAMES_ENV:
                  for part in GAMES_ENV.replace(",", "\n").splitlines():
                      if part.strip(): games.append(part.strip())
          if not games:
              print("No hay juegos. Agrega games.txt o env GAMES.")
              sys.exit(0)

          sess = requests.Session()
          sess.headers.update({"User-Agent":"price-tracker/1.3"})
          BASE = "https://api.isthereanydeal.com"

          def _add_key(params:dict)->dict:
              params = dict(params)
              if API_KEY:
                  params["key"] = API_KEY
              return params

          # ---- v1: búsqueda por nombre -> obtiene 'id'
          def search_game_id(title:str):
              url = f"{BASE}/games/search/v1"
              params = _add_key({"title": title, "results": 1})
              r = sess.get(url, params=params, timeout=20)
              if not r.ok:
                  print(f"[WARN] search {title}: {r.status_code} {r.text[:200]}")
                  return None
              data = r.json() or []
              if not data:
                  return None
              return data[0].get("id"), data[0].get("title")

          # ---- v2: overview de precios por IDs (POST)
          def best_price_overview(game_id:str):
              url = f"{BASE}/games/overview/v2"
              params = _add_key({"country": COUNTRY})
              r = sess.post(url, params=params, json=[game_id], timeout=20)
              if not r.ok:
                  print(f"[WARN] overview {game_id}: {r.status_code} {r.text[:200]}")
                  return None
              js = r.json() or {}
              prices = js.get("prices") or []
              if not prices:
                  return None
              item = prices[0]
              cur  = (item.get("current") or {})
              shop = (cur.get("shop") or {}).get("name","")
              price = (cur.get("price") or {}).get("amount", 0.0)
              curr  = (cur.get("price") or {}).get("currency","USD")
              url   = cur.get("url") or (item.get("urls") or {}).get("game","")
              return float(price), curr, shop, url

          def suggest_sale(cost_usd: float):
              denom = 1 - (COMMISSION + TAX_RATE + MARGIN)
              if denom <= 0:
                  denom = 0.01
              sale_usd = math.ceil(cost_usd / denom)
              sale_clp = int(round(sale_usd * FX))
              return sale_usd, sale_clp

          def push(title:str, message:str):
              if not (PUSH_USER and PUSH_TOKEN):
                  print("[INFO] Pushover no configurado, omito push.")
                  return
              r = requests.post("https://api.pushover.net/1/messages.json", data={
                  "token": PUSH_TOKEN,
                  "user": PUSH_USER,
                  "title": title,
                  "message": message
              }, timeout=20)
              print(f"[Pushover] status={r.status_code} {r.text[:120]}")

          # ====== Ejecuta ======
          any_found = False
          for title in games:
              found = search_game_id(title)
              if not found:
                  print(f"❓ {title}: no encontrado (search v1)")
                  continue
              game_id, canonical = found
              res = best_price_overview(game_id)
              if not res:
                  print(f"⚠️ {title}: sin precios para {COUNTRY} (overview v2)")
                  continue
              any_found = True
              price, curr, shop, url = res
              sale_usd, sale_clp = suggest_sale(price)
              shown = canonical or title
              msg = f"{shown}: {price:.2f} {curr} · {shop}\nSugerido ML: {sale_usd} USD (~{sale_clp:,} CLP)\n{url}".replace(",", ".")
              print(msg)
              push(f"Precio {title}", msg)

          if not any_found:
              print("[INFO] No se obtuvieron precios. Prueba cambiar COUNTRY a 'US' o 'EU' y revisa títulos exactos.")
          PY

      - name: Run tracker
        env:
          # 👇 Reemplaza estas 3 líneas con tus claves 👇
          ITAD_API_KEY: "e7042e77a75adc0e213a7d72321f5d6bd6a7439b"
          PUSHOVER_USER: "uuxn5yknp86f48ykd92bgg2uiyg7nw"
          PUSHOVER_TOKEN: "aam5u7zmaj7uoqr24jycdv84wyk6r6"

          # Config rápida (ajústala cuando quieras)
          ML_COMMISSION: "0.13"
          TAX_RATE: "0.19"
          MARGIN: "0.25"
          FX_TO_CLP: "950"
          COUNTRY: "CL"

          # Juegos por nombre (si no subes games.txt)
          GAMES: |
            Elden Ring
            Hollow Knight
        run: python tracker.py
