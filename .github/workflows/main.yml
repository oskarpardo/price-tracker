      - name: Create script
        run: |
          cat > tracker.py << 'PY'
          import os, math, requests, sys

          # ====== CONFIG (lee del env del paso "Run tracker") ======
          API_KEY      = os.getenv("ITAD_API_KEY","").strip()
          PUSH_USER    = os.getenv("PUSHOVER_USER","").strip()
          PUSH_TOKEN   = os.getenv("PUSHOVER_TOKEN","").strip()
          COMMISSION   = float(os.getenv("ML_COMMISSION","0.13"))
          TAX_RATE     = float(os.getenv("TAX_RATE","0.19"))
          MARGIN       = float(os.getenv("MARGIN","0.25"))
          FX           = float(os.getenv("FX_TO_CLP","950"))
          COUNTRY      = os.getenv("COUNTRY","US").upper()  # ← US suele devolver más resultados
          GAMES_ENV    = os.getenv("GAMES","").strip()

          # ====== Juegos: usa games.txt (si existe) o env GAMES ======
          games = []
          try:
              with open("games.txt","r",encoding="utf-8") as f:
                  games = [l.strip() for l in f if l.strip()]
          except FileNotFoundError:
              if GAMES_ENV:
                  for part in GAMES_ENV.replace(",", "\n").splitlines():
                      if part.strip(): games.append(part.strip())
          if not games:
              print("No hay juegos. Agrega games.txt o env GAMES.")
              sys.exit(0)

          sess = requests.Session()
          sess.headers.update({"User-Agent":"price-tracker/1.2"})
          BASE = "https://api.isthereanydeal.com"

          def _add_key(params:dict)->dict:
              # v01 acepta ?key=... (recomendado). Si no tienes key, igual funciona con límites.
              if API_KEY:
                  params = dict(params)
                  params["key"] = API_KEY
              return params

          # ---- v01: búsqueda por nombre -> obtiene 'plain'
          def search_plain(title:str):
              url = f"{BASE}/v01/game/search/"
              params = _add_key({"q": title, "limit": 1})
              r = sess.get(url, params=params, timeout=20)
              if not r.ok:
                  print(f"[WARN] search_plain {title}: {r.status_code} {r.text[:200]}")
                  return None
              js = r.json()
              items = (js.get("data") or {}).get("list") or []
              if not items:
                  return None
              return items[0].get("plain")

          # ---- v01: mejores precios por plain
          def best_price(plain:str):
              url = f"{BASE}/v01/game/prices/"
              params = _add_key({
                  "plains": plain,
                  "country": COUNTRY,   # prueba US primero; luego puedes volver a CL
                  "strict": 0
              })
              r = sess.get(url, params=params, timeout=20)
              if not r.ok:
                  print(f"[WARN] prices {plain}: {r.status_code} {r.text[:200]}")
                  return None
              data = r.json().get("data",{}).get(plain,{})
              lst  = data.get("list") or []
              if not lst:
                  return None
              best = min(lst, key=lambda x: x.get("price_new", 1e9))
              # Campos en v01
              price = float(best.get("price_new",0))
              curr  = best.get("price_currency","USD")
              shop  = (best.get("shop") or {}).get("name","")
              url   = best.get("url","")
              return price, curr, shop, url

          def suggest_sale(cost_usd: float):
              denom = 1 - (COMMISSION + TAX_RATE + MARGIN)
              if denom <= 0: denom = 0.01
              sale_usd = math.ceil(cost_usd / denom)
              sale_clp = int(round(sale_usd * FX))
              return sale_usd, sale_clp

          def push(title:str, message:str):
              if not (PUSH_USER and PUSH_TOKEN):
                  print("[INFO] Pushover no configurado, omito push.")
                  return
              r = requests.post("https://api.pushover.net/1/messages.json", data={
                  "token": PUSH_TOKEN,
                  "user": PUSH_USER,
                  "title": title,
                  "message": message
              }, timeout=20)
              print(f"[Pushover] status={r.status_code} {r.text[:120]}")

          # ====== Ejecuta ======
          any_found = False
          for title in games:
              plain = search_plain(title)
              if not plain:
                  print(f"❓ {title}: no encontrado (v01/search)")
                  continue
              res = best_price(plain)
              if not res:
                  print(f"⚠️ {title}: sin precios para {COUNTRY}")
                  continue
              any_found = True
              price, curr, shop, url = res
              sale_usd, sale_clp = suggest_sale(price)
              msg = f"{title}: {price:.2f} {curr} · {shop}\nSugerido ML: {sale_usd} USD (~{sale_clp:,} CLP)\n{url}".replace(",", ".")
              print(msg)
              push(f"Precio {title}", msg)

          if not any_found:
              print("[INFO] No se obtuvieron precios. Prueba cambiar COUNTRY a 'US' o 'EU' y revisa títulos exactos.")
          PY

      - name: Run tracker
        env:
          # 👇 Reemplaza estas 3 líneas con tus claves 👇
          ITAD_API_KEY: "e7042e77a75adc0e213a7d72321f5d6bd6a7439b"
          PUSHOVER_USER: "uuxn5yknp86f48ykd92bgg2uiyg7nw"
          PUSHOVER_TOKEN: "aam5u7zmaj7uoqr24jycdv84wyk6r6"

          # Config rápida (ajústala cuando quieras)
          ML_COMMISSION: "0.13"
          TAX_RATE: "0.19"
          MARGIN: "0.25"
          FX_TO_CLP: "950"
          COUNTRY: "CL"

          # Juegos por nombre (si no subes games.txt)
          GAMES: |
            Elden Ring
            Hollow Knight
        run: python tracker.py
